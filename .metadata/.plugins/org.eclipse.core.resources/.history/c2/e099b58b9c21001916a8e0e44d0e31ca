
public class GeeksQues {

	public static void main(String[] args) {

//		Printing brackets in Matrix Chain Multiplication Problem
//		Given an array p[] which represents the chain of matrices such 
//		that the ith matrix Ai is of dimension p[i-1] x p[i]. We need to write a function MatrixChainOrder() that should return the minimum number of multiplications needed to multiply the chain.
//
//				  Input:  p[] = {40, 20, 30, 10, 30}  
//				  Output: Optimal parenthesization is  ((A(BC))D)
//				          Optimal cost of parenthesization is 26000
		
		int[] dims={40,20,30,10,30};
		System.out.println("Min Operations:"+MatrixChainMultiplication(dims,0,5).cost);
		System.out.println("Order of execution:"+MatrixChainMultiplication(dims,0,5).name);
		
		
		// Count total set bits in all numbers from 1 to n
		// Given a positive integer n, count the total number of 
		//set bits in binary representation of all numbers from 1 to n.
		System.out.println(CountSetbits(7));
	}
	
	static String arr[]={"A","B","c","D","E"};
	
	public class Stringmcm{
		int cost;
		String name;
		
		
	}
	public static Stringmcm MatrixChainMultiplication(int[] dims, int si, int ei){
		Stringmcm[][] mcm=new Stringmcm[dims.length][dims.length];
		
		for(int gap=1;gap<=dims.length-1;gap++){
//			for(int s=si; s<=dims.length-1;s++){
			int s=si;
			int e=s+gap;
				
				while(e<dims.length){
					if(gap==1){
						mcm[s][e].cost=0;
						mcm[s][e].name=arr[s];
					}else{
						
						int min=Integer.MAX_VALUE;
						for(int cp=s+1;cp<=e-1;cp++){
							int fp=mcm[s][cp].cost;
							int sp=mcm[cp][e].cost;
							int pc= dims[s]*dims[cp]*dims[e];
							
							int totalcost=fp+sp+pc;
							if(totalcost<min){
								mcm[s][e].cost=totalcost;
								mcm[s][e].name="("+mcm[s][cp].name+mcm[cp][e].name+")";
							}
							
						}
					}
					s++;
					e++;
			}
		}
		
		
		
		return mcm[0][dims.length-1];
	}
	
	public static int CountSetbits(int n){  //nlogn
		int count=0;
		for(int i=1;i<=n;i++){
			int num=i;
			while(num!=0){
				num=num&(num-1);
				count++;
			}
		}
		return count;
	}

}
