
public class LinkedList {

	public class Node {
		int data;
		Node next;
	}

	Node head;
	Node tail;
	int size;
	Node temp;
	public void addLast(int val) {
		if (size == 0) {
			handleAddwhensize0(val);
			return;
		}

		Node node = new Node();
		node.data = val;
		tail.next = node;
		tail = node;
		size++;

	}

	public void handleAddwhensize0(int val) {
		Node node = new Node();
		node.data = val;
		tail = head = node;
		size++;
	}

	public void display() {
		for (Node node = head; node != null; node = node.next) {
			System.out.print(node.data + " -> ");
		}
		System.out.println();
	}

	public int getFirst() {
		if (size == 0) {
			System.out.println("List empty");
			return -1;
		}
		return head.data;
	}

	public int getLast() {
		if (size == 0) {
			System.out.println("List Empty");
			return -1;
		}
		return tail.data;
	}

	public int getAt(int indx) {
		
		if (size == 0) {
			System.out.println("List empty");
			return -1;
		} else if (indx < 0 || indx >= size) {
			System.out.println("Index out of bounds");
		}
		Node node = head;
		for (int i = 0; i < indx; i++) {
			node = node.next;
		}
		return node.data;
	}
	public Node getNodeAt(int indx){
		if(indx<0 || indx >=size){
			System.out.println("Invalid index");
			return new Node();
		}
		Node node=head;
		for(int i=0;i<indx;i++){
			node=node.next;
		}
		return node;
		
	}

	public void addFirst(int val) {
		if (size == 0) {
			handleAddwhensize0(val);
			return;
		}
		Node node = new Node();
		node.data = val;
		node.next = head;
		head = node;
		size++;
	}
	public void addAt(int indx, int val){
		if(size==0){
			handleAddwhensize0(val);
			return;
		}
		if(indx<0 || indx>size){
			System.out.println("Invalid index");
			return;
		}
		if(indx==0){
			addFirst(val);
			return;
		}
		if(indx==size){
			addLast(val);
			return;
		}
		Node node=new Node();
		node.data=val;
		
		Node nm1=getNodeAt(indx-1);
		Node np1=nm1.next;
		nm1.next=node;
		node.next=np1;
		size++;
		
	}
	public void removeFirst(){
		if(size==0){
			System.out.println("List Empty");
			return;
		}
		head=head.next;
		size--;
	}
	public void removeLast(){
		if(size==0){
			System.out.println("List Empty");
			return;
		}
		Node nm1=getNodeAt(size-2);
		nm1.next=null;
		tail=nm1;
		size--;
		
	}
	public void removeAt(int indx){
		if(size==0){
			System.out.println("List Empty");
			return;
		}
		if(indx==0){
			removeFirst();
			return;
		}
		if(indx==size-1){
			removeLast();
			return;
		}
		if(indx<0 || indx>=size){
			System.out.println("Invalid index");
			return;
		}
		
		Node nm1=getNodeAt(indx-1);
		Node n=nm1.next;
		Node np1=n.next;
		nm1.next=np1;
		size--;
	}
	
	
	//July 10
	
	public void reverseDataIterative(){
		if(size==0){
			System.out.println("List Empty");
			return;
		}
		Node node1=head;
		Node node2=tail;
		int sizevar=size;
		for(int indx=0;indx<size/2;indx++){
			temp.data=node1.data;
			node1.data=node2.data;
			node2.data=temp.data;
			node1=node1.next;
			sizevar-=2;
			node2=getNodeAt(sizevar);
			
		}
		temp=head;
		head=tail;
		tail=head;
	}
	public void reversePointerIterative(){
		if(size==0){
			
		}
	}
}




















