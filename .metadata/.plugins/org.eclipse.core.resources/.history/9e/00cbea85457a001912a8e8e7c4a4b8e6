package practice;

import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Amazonques {

//	public static void main(String[] args) {
//		Scanner scn = new Scanner(System.in);
//
//		 PriorityQueue pq = new PriorityQueue<>();
//		 PriorityQueue temp = new PriorityQueue<>();
//		
//		 int n = 10;
//		 int q = 10;
//		 for (int i = 0; i < q; i++) {
//		 int m = scn.nextInt();
//		 // pq.add(m);
//		 temp.add(m);
//		 pq.addAll(temp);
//		 System.out.println(solve(m, 1, 10, pq));
//		 }
//	}
//
//	public static int solve(int m, int ll, int ul, PriorityQueue pq) {
//		int sum = ll;
//		while (pq.size() > 0) {
//			int rem = (int) pq.remove();
//
//			if (pq.size() != 0) {
//				int top = (int) pq.peek();
//				sum += (top - 1) + (rem + 1);
//			}
//		}
//
//		sum += ul;
//
//		return sum;
//	}

	
	public static void main(String[] args){
		int N = 6;

		int[][] tree = new int[N][N];
		int[] A = { 1, 5, 7, 8, 6, 10 };
		int[] X = { 6, 7, 2 };
		int[] L = { 1, 2, 6 };
		int[] u = { 1, 1, 2, 2, 3 };
		int[] v = { 2, 3, 4, 5, 6 };

		System.out.println(solve2(N, tree, A, X, L, u, v));

	}
	public static class Node {
		int data;
		ArrayList<Node> children = new ArrayList<>();

		public Node(int data) {
			this.data = data;
		}
	}

	public static int solve2(int N, int[][] tree, int[] A, int[] X, int[] L, int[] u, int[] v) {
		for(int i=0;i<N;i++){
		constructTree(A[u[i]-1],A[v[i]-1],u[i], v[i], tree);
		}
		return -1;
	}

	private static void constructTree(int val1, int val2,int u, int v, int[][] tree) {
//		Node n1=new Node(val1);
//		Node n2=new Node(val2);
//		n1.children.add(n2);
		
		addNode(val1,u);
		addNode(val2,v);
		addEdge(val1,val2);
		
	}
	
	private static void addNode(int val, int indx){
		
	}

}
